package main

import "fmt"

type routin interface { // creating interface with methods
	coding()
}

type backender struct {
	name string
}

type frontender struct {
	name string
}

func working(r routin) { // usual func that can get each struct of interface
	r.coding()
}

func (b backender) coding() { //how we can know that struct in interface? we must recreate methods in interface for each struct
	//if in struct 3 methods, we have to create same 3 methods for struct
	fmt.Println(b.name, "can code sometimes")
}

func (f frontender) coding() {
	fmt.Println(f.name, "can code sometimes")
}

func main() {

	var pavel routin = backender{"Pavel"} // when we have struct that matches with interface we can give them to the vars of that interface
	var max routin = frontender{"Max"}
	working(pavel) // struct "pavel" is var of interface type, and it was given to the func
	working(max)

}



/////////////////////////////////////////////////

package main

import "fmt"

type heater interface {
	heat()
}

type lighter interface {
	lights()
}

type fireplace struct{}

func (f fireplace) heat() {
	fmt.Println("fireplese is heat as fuck")
}

func (f fireplace) lights() {
	fmt.Println("fireplese is light like the sun")
}

func warmThePlace(h heater) {
	h.heat()
}

func lightThePlace(l lighter) {
	l.lights()
}

func main() {
	myFireplace := fireplace{}

	warmThePlace(myFireplace)
	lightThePlace(myFireplace)
}

////////////////////////////////

package main

import "fmt"

type vehicle interface {
	move()
}

type car struct{ model string }
type airplane struct{ model string }
type bus struct{ model string }

func (c car) move() {
	fmt.Println(c.model, "? We dont have a car")
}

func (a airplane) move() {
	fmt.Println(a.model, "Not now, son")
}

func (b bus) move() {
	fmt.Println(b.model, "? You pay...")
}

func getSomePlace(v vehicle) {
	v.move()
}

func main() {

	tesla := car{"Tesla"}
	boeng := airplane{"Boeng"}
	paz := bus{"Pazik"}

	vehicles := [...]vehicle{tesla, boeng, paz}

	for _, vehicle := range vehicles {
		getSomePlace(vehicle)
	}

}